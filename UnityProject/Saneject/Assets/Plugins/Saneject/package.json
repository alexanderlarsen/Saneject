{
  "name": "com.alexanderlarsen.saneject",
  "author": "Alexander Larsen",
  "displayName": "Saneject",
  "version": "0.17.0",
  "description": "Unity Editor dependency injection framework for scenes and prefabs. Bind and resolve your dependencies entirely in the Editor with an inspector-first workflow, including full support for serialized interfaces. No runtime container, no extra lifecycles. Just fast, deterministic DI that feels native to Unity.",
  "documentationUrl": "https://github.com/alexanderlarsen/Saneject/blob/main/README.md",
  "changelogUrl": "https://github.com/alexanderlarsen/Saneject/blob/main/CHANGELOG.md",
  "licensesUrl": "https://github.com/alexanderlarsen/Saneject/blob/main/LICENSE",
  "unity": "2022.3",
  "unityRelease": "12f1",
  "samples": [
    {
      "displayName": "Demo Game",
      "description": "Three-scene demo showing Saneject usage: cross-scene/prefab refs via SerializeInterface, scene/prefab scopes, global scope, UI, and game loop. To run: add StartScene, GameScene, UIScene to Build Settings (in order), open StartScene, press Play. If scripts show as missing in older Unity versions, right-click the Samples folder and select Reimport.",
      "path": "Samples~/DemoGame"
    },
    {
      "displayName": "Component Filter Extensions",
      "description": "A minimal set of example extension methods built on top of Saneject’s component filter API. Shows how you can add your own sugar methods (e.g. filter by parent name, child name, ancestor tag, sibling layer) by composing the core `Where`, `WhereTransform`, and `WhereGameObject` predicates. These examples are intentionally small and non-exhaustive. They’re meant as a starting point for writing your own project-specific filters. The same extension pattern also applies to the asset filter API.",
      "path": "Samples~/ComponentFilterExtensions"
    }
  ]
}
